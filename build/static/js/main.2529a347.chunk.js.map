{"version":3,"sources":["serviceWorker.js","Components/Datagrid.js","Components/Login.js","index.js"],"names":["Boolean","window","location","hostname","match","Datagrid","props","useState","data","setData","validar","setValidar","info","a","fetch","method","headers","token","datos","json","Jumbotron","className","Button","variant","onClick","fetchData","Badge","filaOrdenada","reverse","console","log","map","dato","key","bookingId","locationId","tutenUser","firstName","lastName","bookingTime","streetAddress","bookingPrice","Login","user","setUser","clave","setClave","setToken","toke","sessionTokenBck","Card","Form","Group","controlId","Label","Control","name","onChange","e","usuario","target","value","type","placeholder","Clave","block","alert","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2529a347.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from 'react'\nimport { Jumbotron, Button, Badge } from 'react-bootstrap'\n\nfunction Datagrid(props) {\n    const [data, setData] = useState([])\n    const [validar, setValidar] = useState(false)\n    let info = {}\n    \n\n    async function fetchData() {\n        const datos = await fetch('https://cors-anywhere.herokuapp.com/https://dev.tuten.cl/TutenREST/rest/user/contacto%40tuten.cl/bookings?current=true', {\n            method: 'GET',\n            headers: {\n                'token': props.token,\n                'app': 'APP_BCK',\n                'Access-Control-Allow-Origin': '*',\n                'Accept': 'application/json',\n                'adminemail': 'testapis@tuten.cl'\n            }\n        });\n        info = await datos.json()\n        setValidar(true)\n        setData(info)\n    }\n\n    function handleClick() {\n        fetchData()\n\n    }\n    function ordenarFilas(){\n        let filaOrdenada = data.reverse()\n        setData(filaOrdenada)\n        console.log('ordenando')\n    }\n\n\n    \n    if (validar === false) {\n        return (\n            <Jumbotron className='text-center mt-5'>\n                <h1>Bienvenido!</h1>\n                <Button variant=\"primary\" onClick={handleClick}>Desplegar DataGrid</Button>\n            </Jumbotron>\n        )\n    } else return (\n\n        <div className='container mt-5'>\n            <table className=\"table table-bordered table-light text-center p-3 table-striped\">\n                <thead>\n                    <tr>\n                        <th>BookingId <Badge variant='warning' onClick={ordenarFilas} >&#x02195;</Badge></th>\n                        <th>Cliente </th>\n                        <th>Fecha de Creacion</th>\n                        <th>Direccion</th>\n                        <th>Precio</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.map((dato) => {\n                        return (\n                            <tr key={dato.bookingId}>\n                                <th>{dato.bookingId}</th>\n                                <th>{dato.locationId.tutenUser.firstName} {dato.locationId.tutenUser.lastName}</th>\n                                <th > {dato.bookingTime} </th>\n                                <th>{dato.locationId.streetAddress}</th>\n                                <th>{dato.bookingPrice}</th>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n        </div>\n\n    )\n}\n\nexport default Datagrid\n","import React, { useState } from 'react';\nimport { Form, Card, Button } from 'react-bootstrap'\nimport Datagrid from './Datagrid';\n\n\n\nfunction Login() {\n  const [user, setUser] = useState('')\n  const [clave, setClave] = useState('')\n  const [token, setToken] = useState('')\n  let toke = ''\n\n  async function fetchData() {\n    const datos = await fetch('https://cors-anywhere.herokuapp.com/https://dev.tuten.cl:443/TutenREST/rest/user/testapis%40tuten.cl', {\n      method: 'PUT',\n      headers: {\n        'password': '1234',\n        'app': 'APP_BCK',\n        'Access-Control-Allow-Origin': '*',\n        'Accept': 'application/json'\n      }\n    });\n    const info = await datos.json()\n    toke = await info.sessionTokenBck\n    \nsetToken(toke)\n  }\n   \n  function handleUser(e) {\n    const usuario = e.target.value\n    setUser(usuario)\n  }\n  function handleClave(e) {\n    const Clave = e.target.value\n    setClave(Clave)\n  }\n  function handleClick(){\n    ((user==='testapis@tuten.cl')&&(clave==='1234'))?fetchData():alert('Usuario o Clave Invalida')\n  }\n\n\n  if (token === ''){\n    return (\n      <div className='container'>\n        <Card className=\"w-50 m-5 p-2 col-md-6\">\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label >Email</Form.Label>\n              <Form.Control name='user' onChange={handleUser} type=\"email\" placeholder=\"Ingrese su email\" />\n            </Form.Group>\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control name='clave' onChange={handleClave} type=\"password\" placeholder=\"Password\" />\n            </Form.Group>\n            <Button variant='primary' block onClick={handleClick}>\n              Ingresar\n          </Button>\n          </Form>\n        </Card>\n      </div>  \n    )\n  }else \n    return(\n      <div>\n        <Datagrid token={token} />\n      </div>\n    )\n  \n}\n\nexport default Login;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Login from './Components/Login';\nimport './app.css'\n\nReactDOM.render(<Login />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}